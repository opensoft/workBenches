#!/bin/bash

# =============================================================================
# launchBench - Universal Bench Launcher & Router
# =============================================================================
# Intelligently routes bench requests to admin, design, or dev bench launchers
# using AI-powered natural language understanding with confidence thresholds
# =============================================================================

VERSION="2.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/../config/bench-config.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Icons for better UX
ICON_AI="🤖"
ICON_ADMIN="🔧"
ICON_DESIGN="🎨"
ICON_DEV="💻"
ICON_SUCCESS="✅"
ICON_ERROR="❌"
ICON_INFO="ℹ️"
ICON_WARNING="⚠️"
ICON_ROUTER="🔄"

# Print functions
print_info() { echo -e "${BLUE}${ICON_INFO} $1${NC}"; }
print_success() { echo -e "${GREEN}${ICON_SUCCESS} $1${NC}"; }
print_warning() { echo -e "${YELLOW}${ICON_WARNING} $1${NC}"; }
print_error() { echo -e "${RED}${ICON_ERROR} $1${NC}"; }
print_ai() { echo -e "${PURPLE}${ICON_AI} $1${NC}"; }
print_router() { echo -e "${CYAN}${ICON_ROUTER} $1${NC}"; }

# Check if AI is available
check_ai_availability() {
    # Check for OpenAI API key
    if [ -f "$HOME/.ai-keys/openai.key" ]; then
        export OPENAI_API_KEY=$(cat "$HOME/.ai-keys/openai.key" 2>/dev/null)
    fi
    
    if [ -n "$OPENAI_API_KEY" ] && command -v curl >/dev/null 2>&1; then
        return 0
    fi
    
    return 1
}

# Discover all benches across all categories
discover_all_benches() {
    local benches=()
    
    # Admin benches
    if [ -d "$SCRIPT_DIR/../adminBenches" ]; then
        for bench_dir in "$SCRIPT_DIR/../adminBenches"/*; do
            if [ -d "$bench_dir" ]; then
                local bench_name=$(basename "$bench_dir")
                local description=$(get_bench_description_from_config "$bench_name" || echo "Administrative tools and utilities")
                benches+=("admin:$bench_name:$description")
            fi
        done
    fi
    
    # Design benches
    if [ -d "$SCRIPT_DIR/../designBenches" ]; then
        for bench_dir in "$SCRIPT_DIR/../designBenches"/*; do
            if [ -d "$bench_dir" ]; then
                local bench_name=$(basename "$bench_dir")
                local description=$(get_bench_description_from_config "$bench_name" || echo "Design and creative tools")
                benches+=("design:$bench_name:$description")
            fi
        done
    fi
    
    # Dev benches
    if [ -d "$SCRIPT_DIR/../devBenches" ]; then
        for bench_dir in "$SCRIPT_DIR/../devBenches"/*; do
            if [ -d "$bench_dir" ]; then
                local bench_name=$(basename "$bench_dir")
                # Remove "Bench" suffix if present
                local clean_name=${bench_name%Bench}
                clean_name=$(echo "$clean_name" | tr '[:upper:]' '[:lower:]')
                
                # Check if bench has required files for launching
                if [ -f "$bench_dir/scripts/start-monster.sh" ] || [ -f "$bench_dir/start-monster.sh" ] || [ -f "$bench_dir/.devcontainer/docker-compose.yml" ]; then
                    local description=$(get_bench_description_from_config "$bench_name" || get_dev_bench_description "$clean_name")
                    benches+=("dev:$clean_name:$description")
                fi
            fi
        done
    fi
    
    printf '%s\n' "${benches[@]}"
}

# Get bench description from config file
get_bench_description_from_config() {
    local bench_name="$1"
    if [ -f "$CONFIG_FILE" ] && command -v jq >/dev/null 2>&1; then
        jq -r ".benches.${bench_name}.description // empty" "$CONFIG_FILE" 2>/dev/null
    fi
}

# Get description for dev benches
get_dev_bench_description() {
    local bench_type="$1"
    
    case "$bench_type" in
        flutter)
            echo "Flutter & Dart development environment with Android SDK, Firebase tools, and mobile emulators"
            ;;
        dotnet)
            echo ".NET Core development environment with Entity Framework, SQL tools, and debugging support"
            ;;
        python)
            echo "Python development environment with popular frameworks, data science tools, and debugging"
            ;;
        java)
            echo "Java development environment with Maven, Gradle, Spring Boot, and enterprise tools"
            ;;
        cpp)
            echo "C++ development environment with GCC, CMake, debugging tools, and performance profilers"
            ;;
        *)
            echo "Development environment for $bench_type"
            ;;
    esac
}

# AI-powered bench categorization and recommendation
ai_analyze_bench_request() {
    local request="$1"
    
    print_ai "Analyzing request: '$request'"
    
    # Get all available benches
    local all_benches
    all_benches=$(discover_all_benches)
    
    # Create comprehensive bench catalog for AI
    local bench_catalog=""
    while IFS=':' read -r category name description; do
        case "$category" in
            admin)
                bench_catalog+="ADMIN - $name: $description (infrastructure, deployment, monitoring, databases, cloud management, DevOps)\\n"
                ;;
            design)
                bench_catalog+="DESIGN - $name: $description (UI/UX, graphics, prototyping, wireframes, visual design)\\n"
                ;;
            dev)
                bench_catalog+="DEV - $name: $description (coding, programming, software development, debugging)\\n"
                ;;
        esac
    done <<< "$all_benches"
    
    # Create AI prompt
    local prompt="You are a development environment assistant that helps users find the right workbench.

USER REQUEST: $request

AVAILABLE BENCHES:
$(echo -e "$bench_catalog")

Analyze the user's request and determine:
1. Which CATEGORY they need (admin/design/dev)
2. Which specific BENCH within that category
3. Your CONFIDENCE level (0-100)

Respond EXACTLY in this format:
CATEGORY: [admin/design/dev]
BENCH: [exact_bench_name]
CONFIDENCE: [0-100]
REASON: [brief explanation in one sentence]

Categories:
- ADMIN: Infrastructure, deployment, monitoring, databases, cloud, DevOps, system administration
- DESIGN: UI/UX, graphics, prototyping, wireframes, visual design, creative work
- DEV: Programming, coding, software development, debugging, application development"

    # Make API call
    local response
    if command -v curl >/dev/null 2>&1; then
        response=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "{
                \"model\": \"gpt-4o-mini\",
                \"messages\": [{\"role\": \"user\", \"content\": \"$prompt\"}],
                \"max_tokens\": 200,
                \"temperature\": 0.2
            }" 2>/dev/null)
        
        if [ $? -eq 0 ] && [ -n "$response" ]; then
            # Parse response
            local ai_content=$(echo "$response" | jq -r '.choices[0].message.content' 2>/dev/null)
            
            if [ -n "$ai_content" ] && [ "$ai_content" != "null" ]; then
                echo "$ai_content"
                return 0
            fi
        fi
    fi
    
    return 1
}

# Parse AI response and extract recommendation details
parse_ai_recommendation() {
    local ai_response="$1"
    
    local category=$(echo "$ai_response" | grep "^CATEGORY:" | sed 's/CATEGORY: *//' | tr '[:upper:]' '[:lower:]')
    local bench=$(echo "$ai_response" | grep "^BENCH:" | sed 's/BENCH: *//')
    local confidence=$(echo "$ai_response" | grep "^CONFIDENCE:" | sed 's/CONFIDENCE: *//')
    local reason=$(echo "$ai_response" | grep "^REASON:" | sed 's/REASON: *//')
    
    echo "CATEGORY=$category"
    echo "BENCH=$bench"
    echo "CONFIDENCE=$confidence"
    echo "REASON=$reason"
}

# Launch the appropriate specialized launcher
delegate_to_launcher() {
    local category="$1"
    local bench_name="$2"
    local user_request="$3"
    
    print_router "Delegating to $category bench launcher..."
    
    case "$category" in
        admin)
            if [ -f "$SCRIPT_DIR/../adminBenches/scripts/launchAdminBench" ]; then
                "$SCRIPT_DIR/../adminBenches/scripts/launchAdminBench" "$bench_name"
            else
                print_error "Admin bench launcher not found"
                print_info "Expected: $SCRIPT_DIR/../adminBenches/scripts/launchAdminBench"
                return 1
            fi
            ;;
        design)
            if [ -f "$SCRIPT_DIR/../designBenches/scripts/launchDesignBench" ]; then
                "$SCRIPT_DIR/../designBenches/scripts/launchDesignBench" "$bench_name"
            else
                print_error "Design bench launcher not found"
                print_info "Expected: $SCRIPT_DIR/../designBenches/scripts/launchDesignBench"
                return 1
            fi
            ;;
        dev)
            if [ -f "$SCRIPT_DIR/../devBenches/scripts/launchDevBench" ]; then
                "$SCRIPT_DIR/../devBenches/scripts/launchDevBench" "$bench_name"
            else
                print_error "Dev bench launcher not found"
                print_info "Expected: $SCRIPT_DIR/../devBenches/scripts/launchDevBench"
                return 1
            fi
            ;;
        *)
            print_error "Unknown category: $category"
            return 1
            ;;
    esac
}

# Show interactive category menu
show_category_menu() {
    echo ""
    print_info "Available Bench Categories:"
    echo ""
    echo -e "${YELLOW}1)${NC} ${RED}${ICON_ADMIN} Admin Benches${NC}     - Infrastructure, deployment, cloud, DevOps"
    echo -e "${YELLOW}2)${NC} ${PURPLE}${ICON_DESIGN} Design Benches${NC}   - UI/UX, graphics, prototyping, creative tools"
    echo -e "${YELLOW}3)${NC} ${GREEN}${ICON_DEV} Dev Benches${NC}      - Programming, coding, software development"
    echo ""
    printf "Select category (1-3), or 'q' to quit: "
    read -r choice
    
    case "$choice" in
        1)
            delegate_to_launcher "admin" "" ""
            ;;
        2)
            delegate_to_launcher "design" "" ""
            ;;
        3)
            delegate_to_launcher "dev" "" ""
            ;;
        q|Q)
            print_info "Cancelled"
            ;;
        *)
            print_error "Invalid selection: $choice"
            ;;
    esac
}

# Show comprehensive help
show_help() {
    cat << EOF
${CYAN}launchBench${NC} v${VERSION} - Universal Bench Launcher & Router

${YELLOW}USAGE:${NC}
    launchBench [REQUEST|BENCH_NAME] [OPTIONS]

${YELLOW}DESCRIPTION:${NC}
    Intelligently routes bench requests to the appropriate category launcher
    using AI-powered natural language understanding.

${YELLOW}CATEGORIES:${NC}
    ${RED}${ICON_ADMIN} Admin${NC}     Infrastructure, deployment, monitoring, databases, cloud, DevOps
    ${PURPLE}${ICON_DESIGN} Design${NC}    UI/UX, graphics, prototyping, wireframes, creative tools  
    ${GREEN}${ICON_DEV} Dev${NC}       Programming, coding, software development, debugging

${YELLOW}ARGUMENTS:${NC}
    REQUEST           Natural language description of what you want to do
                      Examples: "I need to deploy to AWS"
                                "Design a mobile app interface"
                                "Debug a Python web application"
    
    BENCH_NAME        Direct bench selection (admin:cloudAdmin, dev:flutter, etc.)

${YELLOW}OPTIONS:${NC}
    --list            List all available benches across categories
    --categories      Show interactive category menu
    --admin           Launch admin bench launcher directly
    --design          Launch design bench launcher directly  
    --dev             Launch dev bench launcher directly
    --help, -h        Show this help message
    --version, -v     Show version information

${YELLOW}AI EXAMPLES:${NC}
    ${GREEN}launchBench "deploy my app to the cloud"${NC}           → Admin category
    ${GREEN}launchBench "create wireframes for mobile app"${NC}     → Design category  
    ${GREEN}launchBench "debug my Flutter application"${NC}         → Dev category
    ${GREEN}launchBench "set up database monitoring"${NC}           → Admin category
    ${GREEN}launchBench "design user interface mockups"${NC}        → Design category

${YELLOW}DIRECT EXAMPLES:${NC}
    ${GREEN}launchBench admin:cloudAdmin${NC}                       → Launch cloud admin tools
    ${GREEN}launchBench dev:flutter${NC}                            → Launch Flutter dev environment
    ${GREEN}launchBench --categories${NC}                           → Show category menu

${YELLOW}CONFIDENCE SYSTEM:${NC}
    - ≥90% confidence: Auto-launches recommended bench
    - <90% confidence: Shows recommendation and asks for confirmation
    - No AI available: Falls back to interactive category menu

${YELLOW}AI MODE:${NC}
    Requires OpenAI API key at: ~/.ai-keys/openai.key or \$OPENAI_API_KEY
    When available, analyzes natural language requests to determine the best bench
    Falls back to category selection when AI is not available

For detailed help on specific categories:
    launchBench --admin --help      # Admin bench options
    launchBench --design --help     # Design bench options  
    launchBench --dev --help        # Dev bench options
EOF
}

# Show all available benches
show_all_benches() {
    print_info "Available Benches Across All Categories:"
    echo ""
    
    local all_benches
    all_benches=$(discover_all_benches)
    
    local admin_found=false design_found=false dev_found=false
    
    # Admin benches
    echo -e "${RED}${ICON_ADMIN} Admin Benches:${NC}"
    while IFS=':' read -r category name description; do
        if [ "$category" = "admin" ]; then
            printf "  ${CYAN}%-20s${NC} %s\n" "$name" "$description"
            admin_found=true
        fi
    done <<< "$all_benches"
    [ "$admin_found" = false ] && echo "  ${YELLOW}No admin benches installed${NC}"
    
    echo ""
    
    # Design benches
    echo -e "${PURPLE}${ICON_DESIGN} Design Benches:${NC}"
    while IFS=':' read -r category name description; do
        if [ "$category" = "design" ]; then
            printf "  ${CYAN}%-20s${NC} %s\n" "$name" "$description"
            design_found=true
        fi
    done <<< "$all_benches"
    [ "$design_found" = false ] && echo "  ${YELLOW}No design benches installed${NC}"
    
    echo ""
    
    # Dev benches
    echo -e "${GREEN}${ICON_DEV} Dev Benches:${NC}"
    while IFS=':' read -r category name description; do
        if [ "$category" = "dev" ]; then
            printf "  ${CYAN}%-20s${NC} %s\n" "$name" "$description"
            dev_found=true
        fi
    done <<< "$all_benches"
    [ "$dev_found" = false ] && echo "  ${YELLOW}No dev benches installed${NC}"
}

# Main function
main() {
    # Parse arguments
    case "$1" in
        --help|-h)
            show_help
            exit 0
            ;;
        --version|-v)
            echo "launchBench v${VERSION} - Universal Bench Launcher"
            exit 0
            ;;
        --list)
            show_all_benches
            exit 0
            ;;
        --categories)
            show_category_menu
            exit $?
            ;;
        --admin)
            shift
            delegate_to_launcher "admin" "$@"
            exit $?
            ;;
        --design)
            shift
            delegate_to_launcher "design" "$@"
            exit $?
            ;;
        --dev)
            shift
            delegate_to_launcher "dev" "$@"
            exit $?
            ;;
        "")
            # No arguments - show category menu or AI prompt
            if check_ai_availability; then
                print_ai "AI-enhanced mode available"
                print_info "Describe what you want to do, or use --categories for menu"
                echo ""
                show_category_menu
            else
                print_warning "AI not available, showing category menu"
                show_category_menu
            fi
            exit $?
            ;;
        *)
            # Check for direct bench specification (category:bench)
            if [[ "$1" == *:* ]]; then
                local category="${1%%:*}"
                local bench="${1##*:}"
                delegate_to_launcher "$category" "$bench" "$1"
                exit $?
            fi
            
            # Natural language processing
            if check_ai_availability; then
                print_ai "Processing natural language request..."
                
                local ai_response=$(ai_analyze_bench_request "$1")
                if [ $? -eq 0 ] && [ -n "$ai_response" ]; then
                    # Parse AI recommendation
                    local recommendation=$(parse_ai_recommendation "$ai_response")
                    eval "$recommendation"
                    
                    print_ai "Analysis Results:"
                    echo "  Category: $CATEGORY"
                    echo "  Bench: $BENCH"
                    echo "  Confidence: $CONFIDENCE%"
                    echo "  Reason: $REASON"
                    echo ""
                    
                    # Check confidence threshold
                    if [ "$CONFIDENCE" -ge 90 ]; then
                        print_success "High confidence (${CONFIDENCE}%) - launching automatically!"
                        delegate_to_launcher "$CATEGORY" "$BENCH" "$1"
                    else
                        print_warning "Moderate confidence (${CONFIDENCE}%) - please confirm"
                        printf "Launch ${CATEGORY} bench '${BENCH}'? (y/N): "
                        read -r confirm
                        if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
                            delegate_to_launcher "$CATEGORY" "$BENCH" "$1"
                        else
                            print_info "Showing category menu instead..."
                            echo ""
                            show_category_menu
                        fi
                    fi
                else
                    print_warning "AI analysis failed, showing category menu"
                    show_category_menu
                fi
            else
                print_error "Natural language processing requires AI (OpenAI API key)"
                print_info "Use --categories for interactive menu or specify directly:"
                print_info "  admin:cloudAdmin, dev:flutter, etc."
                exit 1
            fi
            ;;
    esac
}

main "$@"